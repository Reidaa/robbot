# Simple workflow for deploying static content to GitHub Pages
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Deploy

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  APP_NAME: robbot
  CONTAINER: podman

jobs:
  publish:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  deploy:
    needs: publish
    runs-on: ubuntu-latest
    environment: test
    steps:
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Initialize the ssh-agent
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Scan the host key
        run: |
          mkdir -p ~/.ssh/
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}

      - name: SSH into the server and pull the image and run it
        run: |
          echo "Pulling image"
          ssh $SSH_USER@$SSH_HOST "$CONTAINER pull $IMAGE_TAG"
          echo "Stopping container"
          ssh $SSH_USER@$SSH_HOST "$CONTAINER container stop $APP_NAME || true"
          echo "Removing container"
          ssh $SSH_USER@$SSH_HOST "$CONTAINER container rm -f $APP_NAME || true"
          echo "Starting container"
          ssh $SSH_USER@$SSH_HOST "$CONTAINER run --env REDDIT_ID=$REDDIT_ID --env REDDIT_SECRET=$REDDIT_SECRET --env REDDIT_AGENT=$REDDIT_AGENT --env DISCORD_TOKEN=$DISCORD_TOKEN --env TESTING_GUILD_ID=$TESTING_GUILD_ID --env TESTING_CHANNEL_ID=$TESTING_CHANNEL_ID --name $APP_NAME -d --restart unless-stopped $IMAGE_TAG"
        env:
          IMAGE_TAG: ${{ steps.meta.outputs.tags }}
          APP_NAME: ${{ env.APP_NAME }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          REDDIT_ID: ${{ secrets.REDDIT_ID }}
          REDDIT_SECRET: ${{ secrets.REDDIT_SECRET }}
          REDDIT_AGENT: ${{ vars.REDDIT_AGENT }}
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          TESTING_GUILD_ID: ${{ vars.TESTING_GUILD_ID }}
          TESTING_CHANNEL_ID: ${{ vars.TESTING_CHANNEL_ID }}